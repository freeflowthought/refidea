// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  useremail String @unique @db.VarChar(512)
  password  String @db.VarChar(256)

  Post        Post[]
  Profile     Profile?
  Application Application[]
  Offer       Offer[]

  @@map("users")
}

model Post {
  id          Int      @id @default(autoincrement())
  postTitle   String
  description String
  isOnsite    IsOnsite @default(REMOTE)
  country     String?
  salary      Int?
  bonus       Int?
  category    Category @default(BACKEND)
  createDate  DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  Application Application[]
  Offer       Offer[]

  @@map("posts")
}

model Application {
  id         Int      @id @default(autoincrement())
  interest   String
  createDate DateTime @default(now())
  postId     Int
  post       Post     @relation(fields: [postId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  status     Status   @default(NA)

  @@map("applications")
}

//profile is the information goes with user, introduction etc.
model Profile {
  id           Int    @id @default(autoincrement())
  introduction String
  country      String?
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id])
  @@map("profiles")
}

model Offer {
  //this is from post to other users.
  id         Int    @id @default(autoincrement())
  userId     Int
  createDate DateTime @default(now())
  pStatus    Pstatus  @default(NA)
  postId     Int
  User       User     @relation(fields: [userId], references: [id])
  Post       Post     @relation(fields: [postId], references: [id])

  @@map("offers")
}

enum Category {
  FRONTEND
  BACKEND
  FULLSTACK
  DATA
  BUSINESS
}

enum Status {
  NA
  REJECTED
  PENDING
  APPROVAL
}

enum Pstatus {
  NA
  REJECTED
  APPROVAL
}

enum IsOnsite {
  HYBRID
  REMOTE
  ONSITE
}